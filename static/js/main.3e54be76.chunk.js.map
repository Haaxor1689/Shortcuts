{"version":3,"sources":["Components/Styled/index.tsx","Theme/index.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Box","shouldForwardProp","isPropValid","compose","space","color","layout","flex","flexGrow","flexShrink","flexBasis","justifySelf","alignSelf","order","gridColumn","gridRow","gridArea","position","typography","shadow","defaultProps","minWidth","Flex","flexbox","Grid","grid","justifyItems","alignItems","justifyContent","alignContent","theme","colors","primary","primaryLight","secondary","onLight","onDark","surface","background","error","breakpoints","App","useState","day","setDay","reservations","setReservations","useEffect","a","fetch","response","text","el","document","createElement","innerHTML","res","querySelector","nodes","Array","children","reduce","prev","node","last","length","head","slice","tagName","map","d","fetchData","bus","setBus","querySelectorAll","flexDirection","dangerouslySetInnerHTML","__html","outerHTML","join","css","onClick","Math","max","min","gridTemplateRows","gridAutoColumns","gridAutoRows","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3e54be76.chunk.js","sourcesContent":["import styled from '@emotion/styled/macro';\r\nimport { ElementType } from 'react';\r\nimport {\r\n\tcolor,\r\n\tColorProps,\r\n\tcompose,\r\n\tflexbox,\r\n\tFlexboxProps,\r\n\tgrid,\r\n\tGridProps,\r\n\tlayout,\r\n\tLayoutProps,\r\n\tspace,\r\n\tSpaceProps,\r\n\tposition,\r\n\tPositionProps,\r\n\tTypographyProps,\r\n\ttypography,\r\n\tShadowProps,\r\n\tshadow,\r\n\tflex,\r\n\tflexGrow,\r\n\tflexShrink,\r\n\tflexBasis,\r\n\tjustifySelf,\r\n\talignSelf,\r\n\torder,\r\n\tgridColumn,\r\n\tgridRow,\r\n\tgridArea,\r\n\tjustifyItems,\r\n\talignItems,\r\n\tjustifyContent,\r\n\talignContent,\r\n} from 'styled-system';\r\nimport isPropValid from '@emotion/is-prop-valid';\r\n\r\ntype FlexSelfProps = Pick<\r\n\tFlexboxProps,\r\n\t| 'flex'\r\n\t| 'flexGrow'\r\n\t| 'flexShrink'\r\n\t| 'flexBasis'\r\n\t| 'justifySelf'\r\n\t| 'alignSelf'\r\n\t| 'order'\r\n>;\r\ntype GridSelfProps = Pick<GridProps, 'gridColumn' | 'gridRow' | 'gridArea'>;\r\ntype GridAlignProps = Pick<\r\n\tFlexboxProps,\r\n\t'justifyItems' | 'alignItems' | 'justifyContent' | 'alignContent'\r\n>;\r\n\r\ntype SSProps = SpaceProps &\r\n\tColorProps &\r\n\tLayoutProps &\r\n\tFlexSelfProps &\r\n\tGridSelfProps &\r\n\tPositionProps &\r\n\tTypographyProps &\r\n\tShadowProps;\r\n\r\nexport type BoxProps = Omit<SSProps, 'color'> & {\r\n\tas?: ElementType | keyof JSX.IntrinsicElements;\r\n};\r\nexport type FlexProps = BoxProps & FlexboxProps;\r\n\r\nexport const Box = styled('div', {\r\n\tshouldForwardProp: isPropValid,\r\n})<BoxProps>`\r\n\t${compose(\r\n\t\tspace,\r\n\t\tcolor,\r\n\t\tlayout,\r\n\t\tflex,\r\n\t\tflexGrow,\r\n\t\tflexShrink,\r\n\t\tflexBasis,\r\n\t\tjustifySelf,\r\n\t\talignSelf,\r\n\t\torder,\r\n\t\tgridColumn,\r\n\t\tgridRow,\r\n\t\tgridArea,\r\n\t\tposition,\r\n\t\ttypography,\r\n\t\tshadow,\r\n\t)}\r\n`;\r\n\r\nBox.defaultProps = {\r\n\tminWidth: 0,\r\n};\r\n\r\nexport const Flex = styled(Box)<FlexProps>`\r\n\t${compose(flexbox)}\r\n\tdisplay: flex;\r\n`;\r\n\r\nexport const Grid = styled(Box)<BoxProps & GridProps & GridAlignProps>`\r\n\t${compose(grid, justifyItems, alignItems, justifyContent, alignContent)}\r\n\tdisplay: grid;\r\n`;\r\n","import styled, { CreateStyled } from '@emotion/styled/macro';\r\n\r\nexport const theme = {\r\n\tcolors: {\r\n\t\tprimary: '#7e57c2',\r\n\t\tprimaryLight: '#b085f5',\r\n\t\tsecondary: '#546e7a',\r\n\t\tonLight: '#eceff1',\r\n\t\tonDark: '#fff',\r\n\t\tsurface: '#fff',\r\n\t\tbackground: '#fff',\r\n\t\terror: '#b00020',\r\n\t},\r\n\tbreakpoints: ['40em', '52em', '64em', '76em'],\r\n\tspace: [0, 4, 8, 16, 32, 64, 128, 256, 512],\r\n};\r\n\r\nexport type Theme = typeof theme;\r\n\r\nexport default styled as CreateStyled<Theme>;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from '@emotion/core';\r\nimport { FC, useEffect, useState } from 'react';\r\nimport { ThemeProvider } from 'emotion-theming';\r\n\r\nimport { Flex, Grid } from 'Components/Styled';\r\n\r\nimport { theme, Theme } from 'Theme';\r\n\r\nconst App: FC = () => {\r\n\tconst [day, setDay] = useState(0);\r\n\r\n\t// Swimming pool\r\n\tconst [reservations, setReservations] = useState<Element[][]>([]);\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\tconst response = await fetch(\r\n\t\t\t\t'https://cors-anywhere.herokuapp.com/https://mpsl.sportujemevbrne.cz/rezervace',\r\n\t\t\t);\r\n\t\t\tconst text = await response.text();\r\n\t\t\tconst el = document.createElement('div');\r\n\t\t\tel.innerHTML = text;\r\n\t\t\tconst res = el.querySelector('.s-reservation .s-reservation__body');\r\n\t\t\tif (!res) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst nodes = Array(...res.children)\r\n\t\t\t\t.reduce<Element[][]>((prev, node) => {\r\n\t\t\t\t\tconst last = prev.length > 0 ? prev[prev.length - 1] : [];\r\n\t\t\t\t\tconst head = prev.slice(0, -1);\r\n\t\t\t\t\treturn node.tagName === 'H3'\r\n\t\t\t\t\t\t? [...head, last, [node]]\r\n\t\t\t\t\t\t: [...head, [...last, node]];\r\n\t\t\t\t}, [])\r\n\t\t\t\t.slice(1)\r\n\t\t\t\t.map(d => d.slice(0, -6));\r\n\r\n\t\t\tres && setReservations(nodes);\r\n\t\t};\r\n\t\tfetchData();\r\n\t}, []);\r\n\r\n\t// Bus\r\n\tconst [bus, setBus] = useState<Element[]>();\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\tconst response = await fetch(\r\n\t\t\t\t'https://cors-anywhere.herokuapp.com/https://idos.idnes.cz/idsjmk/spojeni/vysledky/?f=Malinovsk%C3%A9ho%20n%C3%A1m%C4%9Bst%C3%AD&fc=302003&t=Sportovn%C3%AD&tc=302003',\r\n\t\t\t);\r\n\t\t\tconst text = await response.text();\r\n\t\t\tconst el = document.createElement('div');\r\n\t\t\tel.innerHTML = text;\r\n\t\t\tconst res = el.querySelectorAll('.box.connection.detail-box');\r\n\t\t\tif (!res) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tsetBus(Array(...res));\r\n\t\t};\r\n\t\tfetchData();\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<ThemeProvider theme={theme}>\r\n\t\t\t<Flex flexDirection=\"column\" alignItems=\"center\">\r\n\t\t\t\t{bus && (\r\n\t\t\t\t\t<Flex\r\n\t\t\t\t\t\tdangerouslySetInnerHTML={{\r\n\t\t\t\t\t\t\t__html: bus.map(el => el.outerHTML).join(''),\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tcss={(theme: Theme) => css`\r\n\t\t\t\t\t\t\t.box.connection {\r\n\t\t\t\t\t\t\t\tmargin: ${theme.space[4]}px;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t.date-after {\r\n\t\t\t\t\t\t\t\tmargin-left: 8px;\r\n\t\t\t\t\t\t\t\tfont-size: 14px;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\ta.title,\r\n\t\t\t\t\t\t\tinput,\r\n\t\t\t\t\t\t\t.reset.total,\r\n\t\t\t\t\t\t\t.connection-expand,\r\n\t\t\t\t\t\t\tul.stations {\r\n\t\t\t\t\t\t\t\tdisplay: none;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t`}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t\t<Flex>\r\n\t\t\t\t\t<button onClick={() => setDay(d => Math.max(--d, 0))}>\r\n\t\t\t\t\t\tPrev day\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={() => setDay(d => Math.min(++d, reservations.length - 1))}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tNext day\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</Flex>\r\n\t\t\t\t{reservations && (\r\n\t\t\t\t\t<Grid\r\n\t\t\t\t\t\tgridTemplateRows=\"auto auto\"\r\n\t\t\t\t\t\tgridAutoColumns=\"1fr\"\r\n\t\t\t\t\t\tgridAutoRows={40}\r\n\t\t\t\t\t\tdangerouslySetInnerHTML={{\r\n\t\t\t\t\t\t\t__html: reservations[day]\r\n\t\t\t\t\t\t\t\t?.map(el =>\r\n\t\t\t\t\t\t\t\t\tel.tagName === 'H3' || el.tagName === 'H4'\r\n\t\t\t\t\t\t\t\t\t\t? el.outerHTML\r\n\t\t\t\t\t\t\t\t\t\t: el.innerHTML,\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t.join(''),\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tcss={css`\r\n\t\t\t\t\t\t\th3,\r\n\t\t\t\t\t\t\th4 {\r\n\t\t\t\t\t\t\t\tgrid-column-start: 1;\r\n\t\t\t\t\t\t\t\tgrid-column-end: 18;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tdiv {\r\n\t\t\t\t\t\t\t\tdisplay: flex;\r\n\t\t\t\t\t\t\t\talign-items: center;\r\n\t\t\t\t\t\t\t\tjustify-content: center;\r\n\t\t\t\t\t\t\t\tpadding: ${theme.space[2]}px;\r\n\t\t\t\t\t\t\t\toverflow: hidden;\r\n\t\t\t\t\t\t\t\tfont-size: 14px !important;\r\n\t\t\t\t\t\t\t\ttext-align: center;\r\n\r\n\t\t\t\t\t\t\t\t@media (max-width: 650px) {\r\n\t\t\t\t\t\t\t\t\tfont-size: 9px !important;\r\n\t\t\t\t\t\t\t\t\t/* color: transparent !important;\r\n\t\t\t\t\t\t\t\t\t* {\r\n\t\t\t\t\t\t\t\t\t\tcolor: transparent !important;\r\n\t\t\t\t\t\t\t\t\t} */\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t`}\r\n\t\t\t\t\t/>\r\n\t\t\t\t)}\r\n\t\t\t</Flex>\r\n\t\t</ThemeProvider>\r\n\t);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}